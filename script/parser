#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const jsonf = require('json-beautify');
const csvtojson = require('csvtojson/v2');
const readline = require('readline');
const {google} = require('googleapis');

const SHEET_ID = "1pHwXzDlDYAoiaqhTcpwkCfx3gXyx2as3X2UwrQvr-J4"
const SCOPES = ['https://www.googleapis.com/auth/drive'];
const TOKEN_PATH = path.resolve(__dirname, './rsrc/token.json');
const CREDENTIALS_PATH = path.resolve(__dirname, './rsrc/credentials.json')

const client = require('@google/maps').createClient({
  key: 'AIzaSyC-JGJZ5de-LjdH57moTRnax1R2KVHhMwg'
});


try {

  fs.readFile(CREDENTIALS_PATH, (err, content) => {
    if (err) return console.log('Error loading client secret file:', err);
    authorize(JSON.parse(content), exportData);
  });
  
  function authorize(credentials, callback) {
    const {client_secret, client_id, redirect_uris} = credentials.installed;
    const oAuth2Client = new google.auth.OAuth2(
        client_id, client_secret, redirect_uris[0]);
  
    fs.readFile(TOKEN_PATH, (err, token) => {
      if (err) return getNewToken(oAuth2Client, callback);
      oAuth2Client.setCredentials(JSON.parse(token));
      callback(oAuth2Client);
    });
  }

  function getNewToken(oAuth2Client, callback) {
    const authUrl = oAuth2Client.generateAuthUrl({
      access_type: 'offline',
      scope: SCOPES,
    });
    console.log('Authorize this app by visiting this url:', authUrl);
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
    });
    rl.question('Enter the code from that page here: ', (code) => {
      rl.close();
      oAuth2Client.getToken(code, (err, token) => {
        if (err) return console.error('Error retrieving access token', err);
        oAuth2Client.setCredentials(token);
        fs.writeFile(TOKEN_PATH, JSON.stringify(token), (err) => {
          if (err) console.error(err);
          console.log('Token stored to', TOKEN_PATH);
        });
        callback(oAuth2Client);
      });
    });
  }

  function exportData(auth) {
    const drive = google.drive({version: 'v3', auth});
    
    drive.files.export({
        fileId: SHEET_ID,
        mimeType: 'text/csv'
    }).then( (content) => {
      fs.writeFileSync(`./output/${SHEET_ID}.csv`, content.data)

      csvtojson().fromFile(`./output/${SHEET_ID}.csv`).then((json)=>{
        fs.writeFileSync(`./output/${SHEET_ID}.json`, JSON.stringify(json), {encoding: 'utf8'})
        fs.unlinkSync(`./output/${SHEET_ID}.csv`)
        parseLocation()
      })

    })
  }

  function parseLocation() {
    const file = path.resolve(__dirname, `./output/${SHEET_ID}.json`);
    const json = { locations: {} }
    let data = fs.readFileSync(file, {encoding: 'utf8'})
    if(data.length < 1) {
      throw new Error("File content not found.")
    } else {
  
      data = JSON.parse(data)
      data.map(entry => {
        if(entry.address && entry.address !== undefined ) {
          client.geocode({
            address: entry.address
          }, (err, response) => {
            if(err) throw err
            entry.coordinates = response.json.results[0].geometry.location
            json.locations = data
            
            fs.writeFileSync(`./output/parsed.${SHEET_ID}.json`, jsonf(json), {encoding: 'utf8'})
          })
        }
      })
    }
  }
  
} catch (err) {
  console.log(`Error: ${err.message}`)
}